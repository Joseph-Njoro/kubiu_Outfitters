SECRET_KEY: django-insecure-drfiftg=^o)wz=p6_^&4643-$5p^i=!7t_9z3vr33)onn6^5fr
DATABASE_NAME: kubiu_outfitters_db
EMAIL_HOST_USER: ramosnjoro@gmail.com
openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/api/blogposts/:
    get:
      operationId: listBlogPosts
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/BlogPost'
          description: ''
      tags:
      - api
    post:
      operationId: createBlogPost
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
      tags:
      - api
  /api/api/blogposts/{id}/:
    get:
      operationId: retrieveBlogPost
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this blog post.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
      tags:
      - api
    put:
      operationId: updateBlogPost
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this blog post.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateBlogPost
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this blog post.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyBlogPost
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this blog post.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/services/:
    get:
      operationId: listServices
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
          description: ''
      tags:
      - api
    post:
      operationId: createService
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
      tags:
      - api
  /api/api/services/{id}/:
    get:
      operationId: retrieveService
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this service.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
      tags:
      - api
    put:
      operationId: updateService
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this service.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateService
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this service.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyService
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this service.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/testimonials/:
    get:
      operationId: listTestimonials
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Testimonial'
          description: ''
      tags:
      - api
    post:
      operationId: createTestimonial
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Testimonial'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Testimonial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Testimonial'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
          description: ''
      tags:
      - api
  /api/api/testimonials/{id}/:
    get:
      operationId: retrieveTestimonial
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this testimonial.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
          description: ''
      tags:
      - api
    put:
      operationId: updateTestimonial
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this testimonial.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Testimonial'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Testimonial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Testimonial'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateTestimonial
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this testimonial.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Testimonial'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Testimonial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Testimonial'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testimonial'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyTestimonial
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this testimonial.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/contacts/:
    get:
      operationId: listContacts
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
          description: ''
      tags:
      - api
    post:
      operationId: createContact
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
      tags:
      - api
  /api/api/contacts/{id}/:
    get:
      operationId: retrieveContact
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this contact.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
      tags:
      - api
    put:
      operationId: updateContact
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this contact.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateContact
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this contact.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyContact
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this contact.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/faqs/:
    get:
      operationId: listFAQs
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQ'
          description: ''
      tags:
      - api
    post:
      operationId: createFAQ
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQ'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FAQ'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FAQ'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
          description: ''
      tags:
      - api
  /api/api/faqs/{id}/:
    get:
      operationId: retrieveFAQ
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this faq.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
          description: ''
      tags:
      - api
    put:
      operationId: updateFAQ
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this faq.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQ'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FAQ'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FAQ'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateFAQ
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this faq.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQ'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FAQ'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FAQ'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyFAQ
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this faq.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/aboutus/:
    get:
      operationId: listAboutUs
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AboutUs'
          description: ''
      tags:
      - api
    post:
      operationId: createAboutUs
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutUs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AboutUs'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AboutUs'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutUs'
          description: ''
      tags:
      - api
  /api/api/aboutus/{id}/:
    get:
      operationId: retrieveAboutUs
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this about us.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutUs'
          description: ''
      tags:
      - api
    put:
      operationId: updateAboutUs
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this about us.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutUs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AboutUs'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AboutUs'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutUs'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateAboutUs
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this about us.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutUs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AboutUs'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AboutUs'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutUs'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyAboutUs
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this about us.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/portfolios/:
    get:
      operationId: listPortfolios
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                - count
                - results
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Portfolio'
          description: ''
      tags:
      - api
    post:
      operationId: createPortfolio
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Portfolio'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Portfolio'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: ''
      tags:
      - api
  /api/api/portfolios/{id}/:
    get:
      operationId: retrievePortfolio
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this portfolio.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: ''
      tags:
      - api
    put:
      operationId: updatePortfolio
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this portfolio.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Portfolio'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Portfolio'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdatePortfolio
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this portfolio.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Portfolio'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Portfolio'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyPortfolio
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this portfolio.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/api/protected/:
    get:
      operationId: listProtecteds
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - api
  /api/api/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - api
  /api/api/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /api/api-token-auth/:
    post:
      operationId: createAuthToken
      description: ''
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
      tags:
      - api
  /api/api/login/:
    post:
      operationId: createCustomLogin
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
components:
  schemas:
    BlogPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
        summary:
          type: string
          nullable: true
          maxLength: 255
        published_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
      required:
      - title
      - content
      - author
    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          multipleOf: 0.01
          maximum: 100000000
          minimum: -100000000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
      required:
      - title
      - description
      - price
      - created_by
    Testimonial:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
        rating:
          type: integer
          maximum: 5
          minimum: 1
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - content
      - rating
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: string
        email:
          type: string
          format: email
          maxLength: 254
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - message
      - email
    FAQ:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: string
        answer:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - question
      - answer
    AboutUs:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - title
      - description
    Portfolio:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image_url:
          type: string
          format: uri
          maxLength: 255
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)(?:\\\
            .(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}|\\[[0-9a-f:.]+\\\
            ]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1-\uFFFF0-9])?(?:\\\
            .(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1-\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\
            .?|localhost))(?::[0-9]{1,5})?(?:[/?#][^\\s]*)?\\z"
        category:
          type: string
          nullable: true
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
      required:
      - title
      - image_url
      - created_by
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - username
      - password
